Import Libraries:
Start by importing the necessary libraries.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


Load Data:
Load historical stock price data.
# Load historical stock data (replace 'your_data.csv' with your actual file)
df = pd.read_csv('your_data.csv')

# Display the first few rows of the dataframe
print(df.head())


Data Preprocessing:
Prepare the data by selecting the relevant feature and normalizing it.
# Select the 'Close' column as the feature
data = df[['Close']].values

# Normalize the data using Min-Max scaling
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data)


Create Sequences:
Create sequences of data for input to the LSTM model.
# Function to create sequences
def create_sequences(data, seq_length):
    sequences = []
    for i in range(len(data) - seq_length):
        seq = data[i:i + seq_length]
        sequences.append(seq)
    return np.array(sequences)

# Set sequence length (number of time steps to look back)
sequence_length = 10

# Create sequences for input to the model
X = create_sequences(data_scaled, sequence_length)

# Target variable is the next day's closing price
y = data_scaled[sequence_length:]


Train-Test Split:
Split the dataset into training and testing sets.
split_ratio = 0.8  # 80% training, 20% testing
split_index = int(split_ratio * len(X))

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]


Build LSTM Model:
Build a simple LSTM model.
model = Sequential()
model.add(LSTM(50, input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Display the model architecture
print(model.summary())


Train the Model:
Train the LSTM model using the training data.
model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)


Evaluate the Model:
Evaluate the model on the test set.
loss = model.evaluate(X_test, y_test, verbose=0)
print(f'Mean Squared Error on Test Data: {loss}')


Make Predictions:
Make predictions using the trained model.
predictions = model.predict(X_test)

# Inverse transform the predictions to original scale
predictions = scaler.inverse_transform(predictions)

# Inverse transform the true values to original scale
y_test_original = scaler.inverse_transform(y_test)


Visualization:
Visualize the predicted vs. actual stock prices.
plt.figure(figsize=(12, 6))
plt.plot(y_test_original, label='Actual Prices', color='blue')
plt.plot(predictions, label='Predicted Prices', color='red')
plt.title('Stock Price Prediction with LSTM')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
